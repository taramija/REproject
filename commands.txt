1/file transfer:

    rsync -aPz [src_path] [remote_address]:[destin_path]

    ex: rsync -aPz /ros/indigo/catkin_ws/src/rbx1 turtlebot@192.168.0.100:/ros/indigo/catkin_ws/src/rbx1

2/ssh: remote access

    ssh [remote_address]

3/permission granting: 

    sudo chmod a+rw /dev/ttyUSB0

4/apt update:

    sudo apt-get install [software_name]

5/package_create:

    catkin_make

6/joystick configuration:

    ref http://wiki.ros.org/joy/Tutorials/ConfiguringALinuxJoystick

    $ sudo apt-get install ros-indigo-joy                   (download joystick package)
    $ ls /dev/input/                                        (list all the input)
    $ sudo jstest /dev/input/js0                            (test joystick)
    $ ls -l /dev/input/js0                                  (check permission)
    $ sudo chmod a+rw /dev/input/jsX                        (grant permission)
    $ roslaunch turtlebot_teleop logitech.launch --screen   (launch joystick config)
    
    or launch keyboard file:
    $ roslaunch turtlebot_teleop keyboard_teleop.launch     (launch keyboard config)

7/arm configuration:

    ref: http://edu.gaitech.hk/turtlebot/turtlebot-arm-pincher.html

    a/ install file to download: 
        - java (for dynamixel)
        - dynamixel
        - arduino 1.0.6, 

       package to download: 
        - turtlebot_arm (https://github.com/turtlebot/turtlebot_arm)
        - arbotix_ros (https://github.com/vanadiumlabs/arbotix_ros)
        - sketchbook (https://github.com/trossenrobotics/arbotix/archive/master.zip)

    b/ implementation step: 
        - install java
        - install arduino 
        - replace default sketchbook
        - plug the arm on computer
        - check on Arduino (Board: Arbotix, Serial port: usb0, Programmer: AVRISP MKII)
        - load ros from sketchbook on the board
        - use dynamixel set id for each servo

    c/ ros:
        - $ sudo apt-get install ros-indigo-arbotix                        (download package)
        - $ sudo chmod 777 /dev/ttyUSB0                                   (grant permission for ttyUSB0)
        - $ arbotix_terminal                                              (open arbotix terminal)
        - $ ls                                                            (list servo ids)

        - copy launch file on gaitech and modify the "yaml"        
        
        - $ roslaunch turtlebot_arm_bringup turtlebot_arm_bringup.launch  (launch servo config file)
        - $ arbotix_gui                                                   (open servo controller)
        
8/gmapping:

    a/ download: rplidar package (https://github.com/roboticslab-fr/rplidar-turtlebot2)

    b/ ros:

        launch rplidar config file (turtle bot):
        - $ roslaunch turtlebot_le2i rplidar_minimal.launch
    
        launch gmapping config file (workstation):
        - $ roslaunch rbx1_nav gmapping_demo.launch   
        - $ rosrun rviz rviz -d `rospack find rbx1_nav`/gmapping.rviz

        joystick:
        - $ roslaunch rbx1_nav joystick_teleop.launch
        
        record data to bag file (workstation):
        - $ roscd rbx1_nav/bag_files
        - $ rosbag record -O my_scan_data /scan /tf

        save the map (workstation):
        - $ roscd rbx1_nav/maps
        - $ rosrun map_server map_saver -f my_map

        view the map (workstation):
        - $ roscd rbx1_nav/maps
        - $ eog my_map.pgm

9/navigation:
    
        launch config file (turtle bot)
        - $ roslaunch turtlebot_le2i remap_rplidar_minimal.launch
    
        launch amcl with map file (workstation)
        - $ roslaunch rbx1_nav tb_demo_amcl.launch map:=my_map.yaml
        - $ roslaunch rbx1_nav tb_nav_test.launch map:=my_map.yaml

        open rviz with the saved map
        - $ rosrun rviz rviz -d `rospack find rbx1_nav`/nav_test.rviz





==================== ARM CONTROLLING ========================



$ rosmsg show sensor_msgs/JointState (show messages)

$ rostopic pub -1 /arm_shoulder_pan_joint/command std_msgs/Float64 -- -1.0  (move the arm 1 radian) (-- for negative value)

$ rosservice call /head_pan_joint/set_speed 0.5 (set_speed service)
    
$ rosservice call /head_pan_joint/torque_enable False (relax)

$ rosservice call /head_pan_joint/set_torque_limit 0.1 (set limit force to deal with pressure)


$ rosrun rviz rviz -d `rospack find rbx1_dynamixels`/dynamixels.rviz (open specific rviz)

$ rostopic list (show topics)

$ rostopic echo /joint_states (show a specific topic)

$ rosservice list | grep '/head_pan\|/head_tilt' (To list the ROS services available for each joint)

$ rosrun rbx1_dynamixels relax_all_servos.py (run a .py)


$ sed -i 's/^solid/robot/' * (enter this in stl folder, fix malformed stl when running rviz navigation)

